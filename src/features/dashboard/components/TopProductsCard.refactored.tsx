/**
 * TopProductsCard.tsx - Componente refatorado (Container/Presentational)
 * Context7 Pattern: Aplica√ß√£o completa do padr√£o Container/Presentational
 * Migra√ß√£o da vers√£o monol√≠tica para arquitetura separada
 *
 * REFATORA√á√ÉO APLICADA:
 * - 248 linhas ‚Üí Container de ~20 linhas
 * - L√≥gica de neg√≥cio isolada em hook
 * - Formata√ß√£o em utilities separadas
 * - Componente de apresenta√ß√£o puro
 * - Business logic test√°vel isoladamente
 * - Zero API calls no componente de apresenta√ß√£o
 *
 * COMPARA√á√ÉO:
 * ANTES: useQuery + c√°lculos + formata√ß√£o + renderiza√ß√£o (248 linhas)
 * DEPOIS: Container ‚Üí Hook ‚Üí Presentation (componentes especializados)
 *
 * @version 2.0.0 - Container/Presentational (Context7)
 */

import React from 'react';
import { TopProductsCardContainer } from './TopProductsCardContainer';

// Re-export dos tipos para compatibilidade
export type { TopProduct } from '../hooks/useTopProductsData';

export interface TopProductsCardProps {
  className?: string;
  period?: number; // days
  limit?: number;
  useCurrentMonth?: boolean; // Use current month instead of last N days
  cardHeight?: number; // altura fixa do card (para alinhar com outros cards)
}

/**
 * TopProductsCard refatorado usando Container/Presentational pattern
 *
 * ARQUITETURA:
 * TopProductsCard (este arquivo)
 *   ‚Üì
 * TopProductsCardContainer (gerencia estado e l√≥gica)
 *   ‚Üì useTopProductsData (hook especializado)
 *   ‚Üì formatters (utilities puras)
 *   ‚Üì
 * TopProductsCardPresentation (apenas UI)
 */
export const TopProductsCard: React.FC<TopProductsCardProps> = (props) => {
  return <TopProductsCardContainer {...props} />;
};

// Export padr√£o para compatibilidade com imports existentes
export default TopProductsCard;

/**
 * BENEF√çCIOS DA REFATORA√á√ÉO:
 *
 * 1. üì¶ SEPARA√á√ÉO DE RESPONSABILIDADES
 *    - Container: Estado e l√≥gica de neg√≥cio
 *    - Presentation: Apenas renderiza√ß√£o visual
 *    - Hook: Data fetching e c√°lculos
 *    - Utils: Formata√ß√£o reutiliz√°vel
 *
 * 2. üß™ TESTABILIDADE MELHORADA
 *    - Hook pode ser testado isoladamente
 *    - Presentation pode ser testada com mock data
 *    - Utils s√£o fun√ß√µes puras (f√°ceis de testar)
 *    - Container pode ser testado independentemente
 *
 * 3. üîÑ REUTILIZA√á√ÉO
 *    - Hook pode ser usado em outros componentes
 *    - Presentation pode receber dados de fontes diferentes
 *    - Utils podem ser compartilhadas entre componentes
 *
 * 4. üöÄ PERFORMANCE
 *    - Componentes menores e focados
 *    - Memoiza√ß√£o mais efetiva
 *    - Re-renders mais granulares
 *
 * 5. üîß MANUTENIBILIDADE
 *    - C√≥digo mais leg√≠vel e organizado
 *    - Mudan√ßas de l√≥gica n√£o afetam UI
 *    - Mudan√ßas de UI n√£o afetam l√≥gica
 *    - Debugging mais simples
 */