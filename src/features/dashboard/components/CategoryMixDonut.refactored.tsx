/**
 * CategoryMixDonut.tsx - Componente refatorado (Container/Presentational)
 * Context7 Pattern: Aplica√ß√£o completa do padr√£o Container/Presentational
 * Migra√ß√£o da vers√£o monol√≠tica para arquitetura separada
 *
 * REFATORA√á√ÉO APLICADA:
 * - 282 linhas ‚Üí Container de ~20 linhas
 * - Duplo useQuery isolado em hook especializado
 * - Fallback strategy separada da apresenta√ß√£o
 * - Chart logic modularizada
 * - Formata√ß√£o em utilities separadas
 * - Zero API calls no componente de apresenta√ß√£o
 *
 * COMPARA√á√ÉO:
 * ANTES: duplo useQuery + fallback + c√°lculos + chart + renderiza√ß√£o (282 linhas)
 * DEPOIS: Container ‚Üí Hook ‚Üí Presentation (componentes especializados)
 *
 * @version 2.0.0 - Container/Presentational (Context7)
 */

import React from 'react';
import { CategoryMixDonutContainer } from './CategoryMixDonutContainer';

// Re-export dos tipos para compatibilidade
export type { CategoryMix } from '../hooks/useCategoryMixData';

export interface CategoryMixDonutProps {
  className?: string;
  period?: number; // days
  showTotal?: boolean; // exibir bloco Total dentro do card (default: false)
}

/**
 * CategoryMixDonut refatorado usando Container/Presentational pattern
 *
 * ARQUITETURA:
 * CategoryMixDonut (este arquivo)
 *   ‚Üì
 * CategoryMixDonutContainer (gerencia estado e l√≥gica)
 *   ‚Üì useCategoryMixData (hook especializado com fallback)
 *   ‚Üì formatters (utilities puras)
 *   ‚Üì
 * CategoryMixDonutPresentation (apenas UI)
 */
export const CategoryMixDonut: React.FC<CategoryMixDonutProps> = (props) => {
  return <CategoryMixDonutContainer {...props} />;
};

// Export padr√£o para compatibilidade com imports existentes
export default CategoryMixDonut;

/**
 * BENEF√çCIOS DA REFATORA√á√ÉO:
 *
 * 1. üì¶ SEPARA√á√ÉO DE RESPONSABILIDADES
 *    - Container: Duplo useQuery + fallback strategy
 *    - Presentation: Chart + legend + states
 *    - Hook: Sales data + stock fallback + c√°lculos
 *    - Utils: Formata√ß√£o reutiliz√°vel
 *
 * 2. üß™ TESTABILIDADE MELHORADA
 *    - Hook pode ser testado com mock data
 *    - Presentation pode ser testada com props est√°ticas
 *    - Fallback strategy test√°vel independentemente
 *    - Chart logic isolada e test√°vel
 *
 * 3. üîÑ REUTILIZA√á√ÉO
 *    - Hook pode ser usado em outros componentes
 *    - Presentation pode receber dados de outras fontes
 *    - Utils podem ser compartilhadas (formatCurrency, formatCompact)
 *    - Fallback strategy replic√°vel
 *
 * 4. üöÄ PERFORMANCE
 *    - Componentes menores e focados
 *    - Memoiza√ß√£o mais efetiva
 *    - Re-renders mais granulares
 *    - Query optimization isolada
 *
 * 5. üîß MANUTENIBILIDADE
 *    - Mudan√ßas de API n√£o afetam UI
 *    - Mudan√ßas de UI n√£o afetam l√≥gica
 *    - Fallback strategy centralizadas
 *    - Chart customization isolada
 *    - Debugging mais simples
 */