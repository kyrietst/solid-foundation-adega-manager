/**
 * Utilit√°rios para convers√£o e valida√ß√£o segura de n√∫meros
 * Previne valores NaN em c√°lculos de KPIs e m√©tricas
 */

/**
 * Converte um valor para n√∫mero de forma segura, evitando NaN
 * @param value - Valor a ser convertido (string, number, null, undefined)
 * @param defaultValue - Valor padr√£o se a convers√£o falhar (padr√£o: 0)
 * @returns N√∫mero v√°lido ou valor padr√£o
 */
export function safeNumber(value: string | number | null | undefined, defaultValue: number = 0): number {
  // Se √© null, undefined ou string vazia, retorna default
  if (value === null || value === undefined || value === '') {
    return defaultValue;
  }
  
  // Converte para n√∫mero
  const converted = Number(value);
  
  // Se √© NaN ou infinito, retorna default
  if (isNaN(converted) || !isFinite(converted)) {
    if (value !== 0 && value !== '0') { // S√≥ loga se n√£o for zero v√°lido
      console.warn(`‚ö†Ô∏è safeNumber: Valor inv√°lido "${value}" convertido para ${defaultValue}`);
    }
    return defaultValue;
  }
  
  return converted;
}

/**
 * Calcula percentual de forma segura, evitando divis√£o por zero
 * @param value - Valor atual
 * @param base - Valor base para o c√°lculo
 * @param defaultValue - Valor padr√£o se base for zero (padr√£o: 0)
 * @returns Percentual calculado ou valor padr√£o
 */
export function safePercentage(value: string | number | null | undefined, base: string | number | null | undefined, defaultValue: number = 0): number {
  const safeValue = safeNumber(value);
  const safeBase = safeNumber(base);
  
  // Se base √© zero, retorna default
  if (safeBase === 0) {
    return defaultValue;
  }
  
  const result = (safeValue / safeBase) * 100;
  
  // Verifica se o resultado √© v√°lido
  if (isNaN(result) || !isFinite(result)) {
    console.warn(`‚ö†Ô∏è safePercentage: C√°lculo inv√°lido (${safeValue}/${safeBase}) retornando ${defaultValue}`);
    return defaultValue;
  }
  
  return result;
}

/**
 * Calcula varia√ß√£o percentual (delta) de forma segura
 * @param current - Valor atual
 * @param previous - Valor anterior
 * @param defaultValue - Valor padr√£o se previous for zero (padr√£o: 0)
 * @returns Varia√ß√£o percentual ou valor padr√£o
 */
export function safeDelta(current: string | number | null | undefined, previous: string | number | null | undefined, defaultValue: number = 0): number {
  const safeCurrent = safeNumber(current);
  const safePrevious = safeNumber(previous);
  
  // Se valor anterior √© zero, n√£o h√° como calcular delta
  if (safePrevious === 0) {
    return defaultValue;
  }
  
  return safePercentage(safeCurrent - safePrevious, safePrevious, defaultValue);
}

/**
 * Arredonda um n√∫mero de forma segura para N casas decimais
 * @param value - Valor a ser arredondado
 * @param decimals - N√∫mero de casas decimais (padr√£o: 2)
 * @returns N√∫mero arredondado
 */
export function safeRound(value: string | number | null | undefined, decimals: number = 2): number {
  const safeValue = safeNumber(value);
  const multiplier = Math.pow(10, decimals);
  
  return Math.round(safeValue * multiplier) / multiplier;
}

/**
 * Valida se um valor √© um n√∫mero v√°lido (n√£o NaN, n√£o infinito)
 * @param value - Valor a ser validado
 * @returns true se √© um n√∫mero v√°lido
 */
export function isValidNumber(value: unknown): boolean {
  const converted = Number(value);
  return !isNaN(converted) && isFinite(converted);
}

/**
 * Debug helper: loga valores NaN encontrados
 * @param value - Valor a ser verificado
 * @param context - Contexto onde foi encontrado (para debug)
 * @returns O valor original
 */
export function debugNaN<T>(value: T, context: string): T {
  if (typeof value === 'number' && isNaN(value)) {
    console.error(`üêõ NaN detectado em: ${context}`, { value, context });
  }
  return value;
}