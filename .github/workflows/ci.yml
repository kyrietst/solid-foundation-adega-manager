name: CI/CD - Tests, Lint & Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Instalar depend√™ncias
      run: npm ci
      
    - name: Executar ESLint
      run: npm run lint
      continue-on-error: true # N√£o falhar o build por warnings de lint
      
    - name: Executar testes
      run: npm run test:run
      
    - name: Executar build
      run: npm run build
      
    - name: Gerar coverage report
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Upload coverage para CodeCov (opcional)
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/coverage-final.json
        fail_ci_if_error: false
        
  build-production:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Instalar depend√™ncias
      run: npm ci
      
    - name: Build de produ√ß√£o
      run: npm run build
      
    - name: Verificar artifacts de build
      run: |
        echo "‚úÖ Build conclu√≠do com sucesso"
        echo "üì¶ Arquivos gerados:"
        ls -la dist/
        
    - name: Upload artifacts de build
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  quality-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Instalar depend√™ncias
      run: npm ci
      
    - name: An√°lise de qualidade
      run: |
        echo "üîç Executando an√°lise de qualidade..."
        
        # Executar testes com output detalhado
        npm run test:run > test-results.txt 2>&1 || true
        
        # Extrair m√©tricas dos testes
        TOTAL_TESTS=$(grep -o "[0-9]\+ tests" test-results.txt | head -1 | grep -o "[0-9]\+")
        PASSED_TESTS=$(grep -o "[0-9]\+ passed" test-results.txt | head -1 | grep -o "[0-9]\+")
        
        # Calcular taxa de sucesso
        if [ ! -z "$TOTAL_TESTS" ] && [ ! -z "$PASSED_TESTS" ]; then
          SUCCESS_RATE=$(echo "scale=1; $PASSED_TESTS * 100 / $TOTAL_TESTS" | bc -l)
          echo "üìä Taxa de sucesso dos testes: $SUCCESS_RATE% ($PASSED_TESTS/$TOTAL_TESTS)"
        fi
        
        # Verificar se atende o benchmark m√≠nimo (85%)
        if [ $(echo "$SUCCESS_RATE >= 85" | bc -l) -eq 1 ]; then
          echo "‚úÖ Taxa de sucesso acima do benchmark (85%)"
        else
          echo "‚ö†Ô∏è Taxa de sucesso abaixo do benchmark (85%)"
        fi
        
        echo "üéØ An√°lise de qualidade conclu√≠da"
        
    - name: Comentar PR com m√©tricas (se PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const testResults = fs.readFileSync('test-results.txt', 'utf8');
            const totalMatch = testResults.match(/(\d+) tests/);
            const passedMatch = testResults.match(/(\d+) passed/);
            
            if (totalMatch && passedMatch) {
              const total = parseInt(totalMatch[1]);
              const passed = parseInt(passedMatch[1]);
              const successRate = ((passed / total) * 100).toFixed(1);
              
              const comment = `## üìä M√©tricas de Qualidade - CI/CD
              
**Resultados dos Testes:**
- ‚úÖ Testes passando: ${passed}/${total} (${successRate}%)
- üéØ Benchmark: 85% (${successRate >= 85 ? '‚úÖ Aprovado' : '‚ö†Ô∏è Abaixo do esperado'})

**Build Status:** ‚úÖ Sucesso

*Gerado automaticamente pelo CI/CD do Adega Manager*`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Erro ao processar m√©tricas:', error);
          }